<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.tangmonkmeat.mapper.HistoryMapper">
  <resultMap id="BaseResultMap" type="io.github.tangmonkmeat.model.History">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="chat_id" jdbcType="INTEGER" property="chatId" />
    <result column="u1_to_u2" jdbcType="BIT" property="u1ToU2" />
    <result column="message_type" jdbcType="INTEGER" property="messageType" />
    <result column="send_time" jdbcType="TIMESTAMP" property="sendTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.github.tangmonkmeat.model.History">
    <result column="message_body" jdbcType="LONGVARCHAR" property="messageBody" />
  </resultMap>
  <sql id="Base_Column_List">
    id, chat_id, u1_to_u2, message_type, send_time
  </sql>
  <sql id="Blob_Column_List">
    message_body
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from history
    where id = #{id,jdbcType=INTEGER} and is_deleted=false
  </select>
    <select id="getLastReadChat" resultType="io.github.tangmonkmeat.model.HistoryExample">
      SELECT
        history.chat_id,
        history.message_type,
        history.message_body,
        history.send_time,
        chat.u1,
        chat.u2,
        chat.goods_id
      FROM
        history
      INNER JOIN (
          SELECT
            chat_id,
            max( send_time ) AS max_time
          FROM
            history
          WHERE
            chat_id IN (
                        SELECT
                          id
                        FROM
                          chat
                        WHERE
                          <if test="unreads.size() > 0">
                            id IN
                            <foreach collection="unreads" open="(" separator="," close=")" item="item">
                              #{item}
                            </foreach>
                            AND ((u1 = #{openId} AND show_to_u1 = TRUE) OR ( u2 = #{openId} AND show_to_u2 = TRUE ))
                            AND is_deleted=false
                          </if>
                            <if test="unreads.size() == 0">
                              1=0
                            </if>
                      )
          GROUP BY
              chat_id
          HAVING
              max_time &lt; #{offsetTime,jdbcType=TIMESTAMP}
          ) AS foo ON foo.chat_id = history.chat_id AND foo.max_time = history.send_time
      INNER JOIN chat ON history.chat_id = chat.id
      ORDER BY send_time DESC
    </select>
  <select id="selectChatHistory" resultType="io.github.tangmonkmeat.model.History">
    select chat_id,u1_to_u2, message_type, message_body, send_time
    from history
    where chat_id = #{chatId} and send_time &lt; #{offsetTime} and is_deleted=false order by send_time desc
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="io.github.tangmonkmeat.model.History">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into history (chat_id, u1_to_u2, message_type,
      send_time, message_body)
    values (#{chatId,jdbcType=INTEGER}, #{u1ToU2,jdbcType=BIT}, #{messageType,jdbcType=INTEGER},
      #{sendTime,jdbcType=TIMESTAMP}, #{messageBody,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.github.tangmonkmeat.model.History">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="chatId != null">
        chat_id,
      </if>
      <if test="u1ToU2 != null">
        u1_to_u2,
      </if>
      <if test="messageType != null">
        message_type,
      </if>
      <if test="sendTime != null">
        send_time,
      </if>
      <if test="messageBody != null">
        message_body,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="chatId != null">
        #{chatId,jdbcType=INTEGER},
      </if>
      <if test="u1ToU2 != null">
        #{u1ToU2,jdbcType=BIT},
      </if>
      <if test="messageType != null">
        #{messageType,jdbcType=INTEGER},
      </if>
      <if test="sendTime != null">
        #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="messageBody != null">
        #{messageBody,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <insert id="insertHistoryList" parameterType="list">
    INSERT INTO history (chat_id, u1_to_u2, message_type, message_body, send_time) VALUES
    <foreach item='item' collection='historyList' open='' separator=',' close=''>
      (
      #{item.chatId}, #{item.u1ToU2}, #{item.messageType}, #{item.messageBody}, #{item.sendTime}
      )
    </foreach>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="io.github.tangmonkmeat.model.History">
    update history
    <set>
      <if test="chatId != null">
        chat_id = #{chatId,jdbcType=INTEGER},
      </if>
      <if test="u1ToU2 != null">
        u1_to_u2 = #{u1ToU2,jdbcType=BIT},
      </if>
      <if test="messageType != null">
        message_type = #{messageType,jdbcType=INTEGER},
      </if>
      <if test="sendTime != null">
        send_time = #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="messageBody != null">
        message_body = #{messageBody,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.github.tangmonkmeat.model.History">
    update history
    set chat_id = #{chatId,jdbcType=INTEGER},
      u1_to_u2 = #{u1ToU2,jdbcType=BIT},
      message_type = #{messageType,jdbcType=INTEGER},
      send_time = #{sendTime,jdbcType=TIMESTAMP},
      message_body = #{messageBody,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.github.tangmonkmeat.model.History">
    update history
    set chat_id = #{chatId,jdbcType=INTEGER},
      u1_to_u2 = #{u1ToU2,jdbcType=BIT},
      message_type = #{messageType,jdbcType=INTEGER},
      send_time = #{sendTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateHistoryStatus">
    update history
    set is_deleted=#{isDeleted}
    where chat_id=#{chatId}
  </update>
</mapper>